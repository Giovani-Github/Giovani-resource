正则表达式:符合一定规则的表达式。
	作用：用于专门操作字符串。
	特点：用于一些特定的符号来表示一些代码操作。这样就简化书写。
	所以学习正则表达式，就是在学习一些特殊符号的使用。

	好处：可以简化对字符串的复杂操作。
	弊端：符号定义越多，正则越长，阅读性越差。


具体操作功能：

1，匹配：String  matches方法。用规则匹配整个字符串，只要有一处不符合规则，就匹配（检查）结束，返回false。
	一些常用符号：
		[abc]：只匹配以为字符，而且这个字符只能是abc其中一个。
			比如：String s = "a";
				String reg = "[abc]";//只写了一个[abc]，就是只能检查一个字符串。多个表达式组合起来就能检查字符串
				s.matches(reg);

		[^abc]：除了abc，任何字符串都可以
		[a-zA-Z]：只能是小写字母跟大写字母
		[a-d[m-p]]：只能是a 到 d 或 m 到 p 
		\d ：数字[0-9]，凡事反斜杠的，在java里面都得写双反斜杠 
		\D：非数字[0-9]
		.：任意字符，要用点切割需加\\转意
		x：只能是x字符
		X?：x代表表达式，在表达式后加？，意思就是后面要么有一个字符(包括X这个表达式对应的字符)，要么没有，且还必须符合x这个表达式的规则
		X*：要么没有，要么多个（参照上面）
		X+：要么一个 ，要么多个
		X{n}：只能有n个
		X{n,}：至少有n个
		X{n,m}：至少n个，但不能超过m个

		例子：
			匹配qq号：第一位不能0开头，只能是数字，不能超过15位，不能小于5位
			String qq = "12345646";
			String reg = "[1-9][0-9]{4,14}";//意思就是，第一位必须是1-9的数字，
							第二位必须是0-9的数字，
							且除去第一位外的数（至少有4位，最多有14位，加上第一位就是最少5位，最多15位）
							都得符合[0-9]这个表达式


2，切割：String split();
	(x):为了可以让规则的结果被重用。可以将规则封装成一个组。用()完成。
		组的出现都有编号，从1开始。 想要使用已有的组可以通过  \n(n就是组的编号)的形式来获取
	
	\n：引用第n个组，(x)\n, 如果x是a，n是1， 结果就是aa， n不能是2，因为在这里只有一个组
		记得反斜杠要写两个

3，替换：String replaceAll(regex,str);如果regex中有定义组，可以在第二参数中通过$符号获取正则表达式中的已有的组。

4，获取:将字符串中的符合规则的子串取出。

	操作步骤：
	1，将正则表达式封装成对象。
	2，让正则对象和要操作的字符串相关联。
	3，关联后，获取正则匹配引擎。
	4，通过引擎对符合规则的子串进行操作，比如取出。

	java.util.regex ：
		Pattern：正则表达式的编译表示形式。
			Matcher matcher(CharSequence input)：创建匹配给定输入与此模式的匹配器。 
							（让正则对象和要作用的字符串相关联。获取匹配器对象。）			


			static Pattern compile(String regex)：将给定的正则表达式编译到模式中。 (就是正则表达式封装成对象)

		Matcher：正则表达式的匹配引擎（匹配器）
			boolean find()：尝试查找与该模式匹配的输入序列的下一个子序列。
					(将规则作用到字符串上，并进行符合规则的子串查找。匹配正确后，会记录下正确字符串的开头下标和结尾下标，下一次匹配会在结尾下标的下一个开始) 

			boolean matches()：尝试将整个区域与模式匹配。（上面一个是匹配一个区域，就是找到一次符合规则的就停止） 
					（其实String类中的matches方法。用的就是Pattern和Matcher对象来完成的。
					只不过被String的方法封装后，用起来较为简单。但是功能却单一。）

			end():返回最后匹配字符之后的偏移量(就是匹配到最后一个字符串的下标)
			int start()：返回以前匹配的初始索引。 

			String group()：返回由以前匹配操作所匹配的输入子序列（用于获取匹配后结果。）
				和 s.substring(m.start(), m.end()) 是等效的

	
	例子：
		String str = "ming tian jiu yao fang jia le ,da jia。";
		System.out.println(str);
		String reg = "\\b[a-z]{4}\\b";

		//将规则封装成对象。
		Pattern p = Pattern.compile(reg);

		//让正则对象和要作用的字符串相关联。获取匹配器对象。
		Matcher m  = p.matcher(str);

		while(m.find())
		{
			System.out.println(m.group());
			System.out.println(m.start()+"...."+m.end());
		}
