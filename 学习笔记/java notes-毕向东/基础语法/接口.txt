接口：
	初期理解，可以认为是一个特殊的抽象类
	当抽象类中的方法都是抽象的，那么该类可以通过接口的形式来表示。
	class用于定义类
	interface 用于定义接口。

	接口定义时，格式特点：
	1，接口中常见定义：常量，抽象方法。
	2，接口中的成员都有固定修饰符。
		常量：public static final
		方法：public abstract 
	记住：接口中的成员都是public的。


	接口：是不可以创建对象的，因为有抽象方法。
	需要被子类实现，子类对接口中的抽象方法全都覆盖后，子类才可以实例化。
	否则子类是一个抽象类。

	接口可以被类多实现，也是对多继承不支持的转换形式。java支持多实现。



(

特点：
格式：
	1，通过interface来定义。
	2，接口中常见成员：常量，抽象方法。
		而且这些成员都有固定的修饰符。
		常量：public static final
		方法：public abstract 
	3，接口中的成员都是共有的。
	4，一个类可以对接口进行多实现，也弥补了多继承带来的安全隐患，所以java对多继承进行了改良。
		用多实现方法来体现多继承的特性。
	5，一个类可以继承一个类的同时，实现多个接口。
	6，接口与接口之间是继承关系，而且可以多继承。

应用特点：
	1，接口是对外暴露的规则。
	2，接口是功能的扩展。
	3，接口的出现降低了耦合性。
	别忘了说的时候，需要举例。如usb。pci，主板。插座。


抽象类和接口异同：
	相同：
		1，都可以在内部定义抽象方法。
		2，通常都在顶层。
		3，都不可以实例化，都需要子类来实现。

	不同点：
		1，抽象类中可以定义抽象方法和非抽象方法，
			而接口中只能定义抽象方法。
		2，接口的出现可以多实现。
			抽象类只能单继承。
			也就是说：接口的出现避免了单继承的局限性。
		3，继承和实现的关系不一致。继承：is a，实现：like a 


)