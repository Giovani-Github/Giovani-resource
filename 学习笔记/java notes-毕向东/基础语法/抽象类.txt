当多个类中出现相同功能，但是功能主体不同，
这是可以进行向上抽取。这时，只抽取功能定义，而不抽取功能主体。

抽象：看不懂。

抽象类的特点：
1，抽象方法一定在抽象类中。
2，抽象方法和抽象类都必须被abstract关键字修饰。
3，抽象类不可以用new创建对象。因为调用抽象方法没意义。
4，抽象类中的抽象方法要被使用，必须由子类复写起所有的抽象方法后，建立子类对象调用。
	如果子类只覆盖了部分抽象方法，那么该子类还是一个抽象类。


抽象类和一般类没有太大的不同。
该如何描述事物，就如何描述事物，只不过，该事物出现了一些看不懂的东西。
这些不确定的部分，也是该事物的功能，需要明确出现。但是无法定义主体。
通过抽象方法来表示。

抽象类比一般类多个了抽象函数。就是在类中可以定义抽象方法。
抽象类不可以实例化。


特殊：抽象类中可以不定义抽象方法，这样做仅仅是不让该类建立对象。


练习：

abstract 关键字，和哪些关键字不能共存。
	final：被final修饰的类不能有子类。而被abstract修饰的类一定是一个父类。
	private: 抽象类中的私有的抽象方法，不被子类所知，就无法被复写。
			而抽象方法出现的就是需要被复写。
	static：如果static可以修饰抽象方法，那么连对象都省了，直接类名调用就可以了。
			可是抽象方法运行没意义。



抽象类中是否有构造函数？
有，抽象类是一个父类，要给子类提供实例的初始化。


什么是模版方法呢？
在定义功能时，功能的一部分是确定的，但是有一部分是不确定，而确定的部分在使用不确定的部分，
那么这时就将不确定的部分暴露出去。由该类的子类去完成。



(
其实就是在分析事物时，事物中的功能有些是不明确的内容的。这些不明确内容就是抽象的。
可以通过抽象函数来描述。

抽象函数一定要定义在抽象类中，因为，抽象函数所在类，也必须被抽象标识。

写法特点：
1，抽象函数只对函数进行声明，没有函数主体。
2，抽象类和抽象函数都需要用abstract修饰。
3，抽象类不可以进行实例化。
4，想要使用抽象功能，必须通过子类覆盖了父类中所有的抽象方法后，才可以对子类实例化。
	如果只覆盖了部分抽象方法，那么子类还是一个抽象类。

也可以理解为：抽象类是一个父类，是不断向上抽取而来的，
在抽取过程中，只抽取了方法声明，但没有抽取方法实现。

抽象类和一半类差不多。
区别：
抽象类可以定义抽象方法。
抽象类不可以建立对象。

其实抽象类一样用于描述事物，既可以定义抽象方法，也可以定义非抽象方法。
)
