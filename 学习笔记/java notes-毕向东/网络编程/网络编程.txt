网络参考模型：(就是数据传输出去的路线)
	OSI参考模型：从上到下分为七层，从上到下打包往下传，每到一层加一个本层标识，
			传到另一台机上时，从下往上拆包，到应用层就把数据发到指定的端口：
		应用层，表示层，会话层，
		传输层（TCP和UDP所在的层），
		网络层（IP地址），数据链路层，物理层（网线，光钎等）
	TCP/IP参考模型：从上往下分四层
		应用层（对应OSI一至三层），传输层（对应osi传输层），
		网际层（对应osi网络层），主机至网络层（对应OSI最后两层）

	ps：现在我们玩的是传输跟网际层

三要素：
	IP地址:就是主机在网络所在的地址
	端口：就是应用程序在主机上的地址，
		有效端口号0-65535，其中0-1024被系统使用或保留端口
	协议：就是通信规则，有TCP和UDP等

ICP和UDP
	UDP:它是面向无连接的，将数据及源和目的封装成数据包（DatagramPacket），
		在发数据之前不需要建立连接，目的主机在不在与它无关，
		每个数据包在64k内（大于64k，分成若干个包发），因无连接（容易丢包），
		是不可靠的。不需要建立连接，速度快。ps：聊天，视频会议，桌面共享就是Udp的
	
	TCP：它是面向连接的，发送前需确定目的是否存在，存在才开始发送，
		通过三次握手建立TCP传输通道，数据在传输通道中传输，进行大量数据传输，
		是可靠的，效率会稍低。ps：三次握手就是，1.呼叫对方 2.对方回应 3.回应对方

Socket：（单独概念）（网络编程就是Socket编程）每个协议都有它特有的建立Socket服务的方法
	就是为网络服务提供的一种机制，通信的两端都必须先有Socket，
	只有有了它数据才能进行连接，网络通信就是Socket间的通信，
	数据在连个Socket间通过IO传输



java网络编程在java.net包

InetAddress：此类表示互联网协议 (IP) 地址（主机对像）
	getLocalHost()：返回本地主机。
	getHostAddress()：返回 IP 地址字符串（以文本表现形式）。
	getHostName()：获取此 IP 地址的主机名(需要解析)。
	getByName(String host)：在给定IP地址（主机名）的情况下返回该ip地址所对应的主机对象
				如果这个ip地址和它对应的主机名没有在网络上，找到地址没解析成功
				那么主机名还是这个ip地址

	--|Inet4Address：此类表示 Internet Protocol version 4 (IPv4) 地址
	--|Inet6Address：此类表示互联网协议第 6 版 (IPv6) 地址


UDP传输：
	UDP发送端：
		需求：通过udp传输方式，将一段文字数据发送出去
		思路：
		1.建立udp的Socket服务,通过DatagramSocket对象
		2.提供数据，并将数据封装到数据包中，通过DatagramPacket对象
		3.通过socket服务的发送功能，将数据包发出去
		4.关闭资源，就是关闭Socket服务

	UDP接受端：
		需求：定义一个应用程序，用于接收udp协议传输的数据并处理的。
		思路：1，定义udpsocket服务。通常会监听一个端口。其实就是给这个接收网络应用程序定义数字标识。
			方便于明确哪些数据过来该应用程序可以处理。
		2，定义一个数据包，因为要存储接收到的字节数据。
		因为数据包对象中有更多功能可以提取字节数据中的不同数据信息。
		3，通过socket服务的receive方法将收到的数据存入已定义好的数据包中。
		4，通过数据包对象的特有功能。将这些不同的数据取出。打印在控制台上。
		5，关闭资源。

	DatagramSocket：此类表示用来发送和接收数据报包的套接字（套接字就是Socket），能发送能接收
		DatagramSocket()：构造数据报套接字并将其绑定到本地主机上任何可用的端口。
		DatagramSocket(int port)：创建数据报套接字并将其绑定到本地主机上的指定端口。
		receive(DatagramPacket p)：从此套接字接收数据报包。
		send(DatagramPacket p)：从此套接字发送数据报包
		
	DatagramPacket：此类表示数据报包，数据报包用来实现无连接包投递服务。
			每条报文仅根据该包中包含的信息从一台机器路由到另一台机器。
			从一台机器发送到另一台机器的多个包可能选择不同的路由，
			也可能按不同的顺序到达。不对包投递做出保证。 

			DatagramPacket(byte[] buf, int length)：构造 DatagramPacket，用来接收长度为 length 的数据包。
			DatagramPacket(byte[] buf, int length, InetAddress address, int port) ：
				 构造数据报包，用来将长度为 length 的包发送到指定主机上的指定端口号。
				 buf：数据 length：指定包的长度 address：ip地址 port：发送到哪个端口
			getAddress():返回某台机器的 IP 地址，此数据报将要发往该机器或者是从该机器接收到的。
			getData()：返回数据缓冲区
			getLength()：返回将要发送或接收到的数据的长度。
			getPort()：返回某台远程主机的端口号，此数据报将要发往该主机或者是从该主机接收到的。

TCP传输：
	tcp分客户端和服务端，客户对应的对象是Socket，服务端对应的对象是ServerSocket
	建立客户端（Socket）和服务端（ServerSocket），
	建立后通过Socket中的io流进行数据的传输（一建立就有了输入输出流，通过方法获取就行），最后关闭Socket服务

	TCP客户端建立：
		通过查阅socket对象，发现在该对象建立时，就可以去连接指定主机。
		因为tcp是面向连接的。所以在建立socket服务时，
		就要有服务端存在，并连接成功。形成通路后，在该通道进行数据的传输。
			
		步骤：	
		1，创建Socket服务。并指定要连接的主机和端口。
		2，为了发送数据，需要获取Socket的输出流
		3，通过输出流的输出方法发送数据，发到服务端
		4，获取socket流中的输入流，通过输入流中的read（）方法将服务端反馈的数据获取到，并打印。
		4，关闭Socket

	TCP服务端建立：
		1，建立服务端的socket服务。ServerSocket();并监听一个端口。
		2，获取连接过来的客户端对象。通过ServerSokcet的 accept方法。
			没有连接就会等，所以这个方法阻塞式的。
		3，客户端如果发过来数据，那么服务端要使用对应的客户端对象，
			并获取到该客户端对象的读取流来读取发过来的数据。
			并打印在控制台。
		4，获取客户端的输出流，通过输出方法反馈数据给客户端

		5,关闭客户端（可选）
		6，关闭服务端。（可选）


	Socket：此类实现客户端套接字（也可以就叫“套接字”）。套接字是两台机器间通信的端点。
		Socket(InetAddress address, int port)：创建一个流套接字并将其连接到指定 IP 地址的指定端口号。
		Socket(String host, int port)：创建一个流套接字并将其连接到指定主机上的指定端口号
		getOutputStream()：返回此套接字的输出流。
		getInputStream()：返回此套接字的输入流。
		getInetAddress()：返回套接字连接的地址。
		getLocalAddress()：获取套接字绑定的本地地址。

	ServerScoket：此类实现服务器套接字。
		服务器套接字等待请求通过网络传入。
		它基于该请求执行某些操作，然后可能向请求者返回结果。
		ServerSocket(int port)：创建绑定（监听）到特定端口的服务器套接字。
		accept():侦听并接受到此套接字的连接。此方法在连接传入之前一直阻塞。 
			直到有客户端连接，返回此客户端的Socket
		ServerSocket(int port, int backlog) 
			利用指定的 backlog 创建服务器套接字并将其绑定到指定的本地端口号。
			backlog：最大客户端在线连接数，就是限制连接上来的客户端数量

	SocketAddress:
		--|InetSocketAddress:此类实现 IP 套接字地址（IP 地址 + 端口号）。
			它还可以是一个对（主机名 + 端口号），在此情况下，将尝试解析主机名



浏览器浏览网页的原理就是：
向一个网址（url）发送请求，通过url获取URLConnection，通过URLConnection获取资源

URL:代表一个统一资源定位符，它是指向互联网“资源”的指针。资源可以是简单的文件或目录，也可以是对更为复杂的对象的引用，例如对数据库或搜索引擎的查询
例：http://192.168.1.254:8080/myweb/demo.html 这就是指向互联网资源的指针，192.168.1.254代表主机，8080是主机上的端口，访问这个计算机端口上的文件夹：
myweb/demo.html  相当于网址

	 String getFile() 
		  获取此 URL 的文件名。 
	 String getHost() 
		  获取此 URL 的主机名（如果适用）。 
	 String getPath() 
		  获取此 URL 的路径部分。 
	 int getPort() 
		  获取此 URL 的端口号。 
	 String getProtocol() 
		  获取此 URL 的协议名称。 
	 String getQuery() 
		  获取此 URL 的查询部分。 
	openConnection() 
          返回一个 URLConnection 对象，它表示到 URL 所引用的远程对象的连接。


URLConnection：它代表应用程序和 URL 之间的通信链接。此类的实例可用于读取和写入此 URL 引用的资源。
	getInputStream() 
          返回从此打开的网址读取的输入流。
	getOutputStream() 
          返回写入到此网址的输出流。