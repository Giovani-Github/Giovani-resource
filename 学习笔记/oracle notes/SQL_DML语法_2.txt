知识点：
	1、多表查询的操作、限制、笛卡尔积的问题
	2、统计函数及分组统计的操作
	3、子查询的操作，并且结合限定查询、数据排序、多表查询一起完成各个复杂查询的操作
	4、数据库的更新操作：增加、修改、删除数据
	5、数据伪列的作用：ROWNUM、ROWID
	6、完成一套复杂查询的应用案例

具体内容：
	多表查询（重点）：
		多表查询的基本概念：
			在之前所使用的查询操作之中，都是从一张表之中查询出所需要的内容，那么如果现在一个查询语句需要显示多张表的数据，
			则就必须应用到多表查询的操作，而多表查询的语法如下：
			
				SELECT [DISTINCT] *|字段 [别名] [,字段 [别名]]
				FROM 表名称 [别名],[表名称 [别名],....]
				[WHERE 条件(S)] 
				[ORDER BY 排序字段 [ASC|DESC] [,字段 [ASC|DESC],...]] ;

			但是如果要进行多表查询之前，首先必须先查询出几个数据--雇员表和部门表中的数据量，这个操作可以通过COUNT()函数完成。

			范例：查询emp表中的数据量 -- 返回了14条记录

			SELECT COUNT(*) FROM emp;

			范例：查询dept表中的数据量 -- 返回了了4条记录

			SELECT COUNT(*) FROM dept;

			额外补充一点：何为经验？
				在日后开发之中，很多人都肯定要接触到许多新的数据库和数据表，那么在这种时候有两种做法：
					・做法一：新人做法，上来直接输入一下命令：

						SELECT * FROM 表名称;

						如果此时数据量较大的话，一是无法浏览数据，二有可能造成系统的司机。

					・做法二：老人做法，先看一下有多少条记录：

						SELECT COUNT(*) FROM 表名称;
						
						如果此时数据量较小，则可以查询全部数据，如果数据量较大则不能直接使用SELECT查询。

			现在确定好了emp和dept表中的记录之后，小面完成一个基本的多表查询：

			SELECT * FROM emp,dept;

			但是现在查询之后发现一共产生了56条记录，而56条记录=雇员表的14条记录*部门表的4条记录，
			之所以会造成这样的问题，主要都是又数据库的查询机制所决定的，例如，如图：1-1 所示。
			
			本问题在数据库的操作之中被称为笛卡尔积，就表示多张表的数据乘积的意思，但是这种查询结果肯定不是用户所希望的，
			那么该如何去掉笛卡尔积呢？
			
			最简单的方式是采用关联字段的形式，emp表和dept表之间现在存在了deptno的关联字段，所以现在可以从这个字段上的判断开始。
			如图 1-2所示。

			当在多表查询之中，不同的表中有了相同字段名称的时候，访问这些字段必须加上表明称，既“表.字段”。

			SELECT * FROM emp,dept
			WHERE emp.deptno = dept.deptno;
			
			此时的查询结果之中已经消除了笛卡尔积，但是现在只属于显示上的消除，而真正的笛卡尔积现在依然存在，
			因为数据库的操作就属于逐行的进行数据的判断，那么如果按照这个思路理解的话，现在假设两张表的数据量都很大的的话，
			那么使用这种方式进行多表查询的性能会变得很低。

			范例：以sh用户的大数据表为例：

			SELECT COUNT(*) FROM sales,costs
			WHERE sales.prod_id = costs.prod_id;

			这两张表即便消除了笛卡尔积的显示，但是本身也会有笛卡尔积的问题，所以最终的查询结果会很慢显示，
			甚至是不显示，所以通过这道程序一定要记住，多表查询的性能是很差的，当然，性能差是有一个前提的，数据量大。

			但是以上的程序也存在了一个问题，在之前访问表中字段的时候使用的是“表.字段"，那么如果说现在假设表名称很长，
			例如：“sdkfsjd_sdfsd_fllldf_oieorir_dfd_o”，所以一般在进行多表查询的时候往往都会为表起一个别名，通过“别名.字段”的方式进行查询。

			SELECT * FROM emp e,dept d
			WHERE e.deptno = d.deptno;

			范例：查询出每一位雇员的编号、姓名、职位、部门名称、位置
				・确定所需要的数据表：
					|-emp表：可以查询出雇员的编号、姓名、职位
					|-dept表：可以查询出部门名称和位置
				・确定表的关联字段：emp.deptno = dept.deptno

				第一步：查询出每一位雇员的编号，姓名，职位
				
			SELECT e.empno, e.ename, e.job
			FROM emp e;

				第二步：为查询中引入部门表，同事需要增加一个消除笛卡尔积的条件
			
			SELECT e.empno, e.ename, e.job, d.dname, d.loc
			FROM emp e, dept d
			WHERE e.deptno = d.deptno;

			以后遇到问题，发现没有解决问题的思路，就按照上面的步骤进行，慢慢的分析解决，因为多表查询不可能一次性全部写出，需要逐步分析的。
			
			范例：要求查询出每一位雇员的姓名、职位、领导姓名
				关系如图1-3所示。
				现在肯定要准备两个emp表，所以这个时候可以称为emp表的自身关联，按照之前的分析如下：
					・确定所需要的数据表：
						|-emp表（雇员）：取得雇员的姓名、职位、领导编号
						|-emp表（领导）：取得雇员姓名（领导姓名）
					・确定关联字段：emp.mgr=memp.empno（雇员的领导编号=领导（雇员）的雇员编号）
				
				第一步：查询每一位雇员的姓名、职位

				SELECT e.ename, e.job
				FROM emp e;
				
				第二步：查询领导信息，加入自身关联

				SELECT e.ename, e.job, m.ename
				FROM emp e, emp m
				WHERE e.mgr=m.empno;

				此时的查询结果之中缺少了“KING”的记录，因为KING没有领导，而要想解决这个问题，就需要等待之后讲解的左、右连接的问题了。
				
			范例：查询出每个雇员的编号、姓名、基本工资、职位、领导姓名、部门名称及位置
				・确定所需要的数据表：
					|-emp表（雇员）：每个雇员的编号、姓名、基本工资、职位
					|-emp表（领导）：领导的姓名
					|-dept表：部门名称及位置
				・确定已知的关联字段;
					|-雇员和部门：emp.deptno = dept.deptno;
					|-雇员和领导：emp.mgr = memp.empno;

				第一步：查询出每个雇员的编号、姓名、基本工资、职位

				SELECT empno, ename, sal, job
				FROM emp;

				第二步：加入领导信息，引入自身关联，同时正价消除笛卡尔积的条件

				SELECT e.empno, e.ename, e.sal, e.job, m.ename
				FROM emp e, emp m
				WHERE e.mgr = m.empno;
				
				第三步：加入部门信息，引入dept表，既然有新的表进来，则需要继续增加消除笛卡尔积的条件

				SELECT e.empno, e.ename, e.sal, e.job, m.ename, d.dname, d.loc
				FROM emp e, emp m, dept d
				WHERE e.mgr = m.empno AND d.deptno = e.deptno;

			思考题：现在要求查询出每一个雇员的编号，姓名，工资，部门名称、工资所在公司的工资等级
				・确定所需要的数据表：
					|-emp表：雇员的编号，姓名，工资
					|-dept表：部门名称
					|-salgrade表：工资等级
				・确定一直的关联字段：
					|-雇员和部门：emp.deptno = dept.deptno
					|-雇员和工资等级：emp.sal BETWEEN salgrade.losal AND salgrade.hisal;

				第一步：查询出每一个雇员的编号、姓名、工资

			SELECT e.empno, e.ename, e.sal
			FROM emp e;

				第二步：引入部门表，同事增加一个消除笛卡尔积的条件

			SELECT e.empno, e.ename, e.sal, d.dname
			FROM emp e, dept d
			WHERE e.deptno = d.deptno;

				第三步：引入工资等级表，继续增加消除笛卡尔积的条件

			SELECT e.empno, e.ename, e.sal, d.dname, s.grade
			FROM emp e, dept d, salgrade s
			WHERE e.deptno = d.deptno AND e.sal BETWEEN s.losal AND s.hisal;

				如果现在有如下的进一步要求：将每一个工资等级替换成具体的文字信息，例如：
					・1替换成第五等工资，2替换成第四等工资，3替换成第三等工资，一次类推 -->依靠DECODE()实现
			
			SELECT e.empno, e.ename, e.sal, d.dname, 
			DECODE(s.grade, 1, '第五等工资', 2, '第四等工资', 3, '第三等工资', 4, '第二等工资', 5, '第一等工资')
			FROM emp e, dept d, salgrade s
			WHERE e.deptno = d.deptno AND e.sal BETWEEN s.losal AND s.hisal;

			以后的所有的题目都按照类似的方式分析，只要是表关联，肯定有关联字段，用于消除笛卡尔积，
			只是这种关联字段需要根据情况使用不同的限定符号。

		左、右连接：
			关于左、右连接指的是查询判断条件的参考方向，例如，下面有如下查询：

			SELECT *
			FROM emp e, dept d
			WHERE e.deptno = d.deptno;

			部门一共有四个，但是现在只返回了三个部门的信息，缺少40部门，因为在雇员表之中没有一条记录是属于40部门的，
			所以现在不会显示40部门的信息，既：现在的查询以emp表为参考，呢么如果说现在非要显示40部门呢？就必须改变这种参考的方向，
			就需要使用左、右连接。

			SELECT *
			FROM emp e, dept d
			WHERE e.deptno (+)= d.deptno;

			现在发现40部门出现了，所以发现参考的方向已经改变了，而“（+）”就用于左、右连接的更改，这种符号有以下两种使用情况：
				・(+)=：放在了等号的左边，表示的是右连接（右边的表不加限制），即"(+)"所在位置的另一侧为连接的方向，右连接说明等号右侧的所有记录均会被显示，无论其在左侧是否得到匹配。
				・=(+)：放在了等号的右边，表示的是左连接（左边的表不加限制）
			但是不用去刻意的区分是左还是右，只是根据查询结果而定，如果发现有些需要的数据没有显示出来，就使用此符号更改连接方向。

			范例：查询每个雇员的姓名和领导的姓名

			SELECT e.ename, e.job, m.ename
			FROM emp e, emp m
			WHERE e.mgr = m.empno(+);

			可是这种符号是oracle数据库自己所独有的，其他数据库不能使用。

		SQL:1999语法
			除了以上的表连接操作之外，在SQL语法之中，也提供了另外一套用于表连接的操作SQL，格式如下：

			SELECT table1.column,table2.column
			FROM table1 [CROSS JOIN table2] |
			[NATURAL JOIN table2] |
			[JOIN table2 USING(column_name)] |
			[JOIN table2 ON(table1.column_name=table2.column_name)] |
			[LEFT | RIGHT | FULL OUTER JOIN table2 ON(table1.column_name=table2.column_name)];

			以上实际是属于多个语法的联合，下面分块说明语法的使用。

			1、交叉连接（CROSS JOIN）：用于产生笛卡尔积

			SELECT * FROM emp CROSS JOIN dept;

			笛卡尔积本身并不是属于无用的内容，在某些情况下还是需要使用的。

			2、自然连接（NATURAL JOIN）:自动找到匹配的关联字段，消除笛卡尔积

			SELECT * FROM emp NATURAL JOIN dept;

			但是并不是所有的字段都是关联字段，设置关联字段需要通过约束指定。

			3、JOIN...USING 子句：用户自己指定一个消除笛卡尔积的关联字段

			SELECT * FROM emp JOIN dept USING(deptno);

			4、JOIN...ON子句：用户自己指定一个可以消除笛卡尔积的关联条件

			SELECT * FROM emp JOIN dept ON(emp.deptno=dept.deptno);

			5、连接方向的改变： 
				・左（外）连接：LEFT OUTER JOIN...ON
				`右（外）连接：RIGHT OUTER JOIN...ON
				・全（外）连接：FULL OUTER JOIN....ON -->把两张表中没有的数据都显示

			SELECT * FROM emp RIGHT OUTER JOIN dept ON(emp.deptno=dept.deptno);

			在oracle之外的数据库都使用以上的SQL:1999语法操作，所以这个语法还必须会一些。
			再次强调：多表查询的性能肯定不高，而且性能一定要在大数据量的情况下才能够发现。

	统计函数及分组查询（重点，难点）：
		统计函数：
			在之前学习过一个COUNT()函数，此函数的功能可以统计出表中的数据量，实际上这个就是一个统计函数，而常用的统计函数有如下几个：
				・COUNT():查询表中的数据记录
				・AVG():求出平均值
				・SUM():求和
				・MAX():求出最大值
				・MIN():求出最小值

			范例：测试COUNT()、AVG()、SUM()
				・统计出公司的所有雇员，每个月支付的平均工资及总工资。
			
			SELECT COUNT(empno), SUM(sal), AVG(sal) FROM emp;
			 
				・统计雇员中的最高和最低工资

			SELECT MAX(sal), MIN(sal) FROM emp;

			注意点:关于COUNT()函数
				COUNT()函数的主要功能是进行数据的统计，但是在进行数据统计的时候，如果一张表中没有统计记录，COUNT()
				也会返回数据，只是这个数据是“0”。

			SELECT COUNT(ename) FROM bonus;

				如果使用的是其他函数，则有可能返回null，但是COUNT()永远都会返回一个具体的数字，这一点以后开发之中都会使用到。

		分组统计：
			在讲解分组操作之前首先必须明确一点，什么情况下可能分组，例如：
				・公司的所有雇员，要求男性一组，女性一组，之后可以统计男性和女性的数量
				・按照年龄分组，18岁以上的分一组，18以下的分一组
				・按照地区分组，北京一组，上海一组，四川一组
			这些信息如果都保存在了数据库之中，肯定数据的某一列上会存在重复的内容，例如：
			按照性别分组的时候，性别肯定有重复（男和女），按照年龄分组（有一个范围重复），按照地区分组有一个地区信息的重复。
			所以分组之中有一个不成文的规定：当数据重复的时候分组才有意义，因为一个人也可以一组（没什么意义），而如果要想分组，
			则需要使用GROUP BY子句完成，此时的SQL语法如下：

			SELECT [DISTINCT] *|分组字段1 [别名] [,分组字段2 [别名]....]
			FROM 表名称 [别名],[表名称 [别名],....]
			[WHERE 条件(S)] 
			[GROUP BY 分组字段1 [, 分组字段2,....]]
			[ORDER BY 排序字段 [ASC|DESC] [,字段 [ASC|DESC],...]] ;

			范例：按照部门编号分组，求出每个部门的人数，平均工资

			SELECT deptno, COUNT(empno), AVG(sal)
			FROM emp
			GROUP BY deptno;

			范例：按照职位分组，求出每个职位的最高和最低工资

			SELECT job, MAX(sal), MIN(sal)
			FROM emp
			GROUP BY job;
			
			但是现在一旦分组之后，实际上对语法上就会出现了新的限制，对于分组有以下要求：
				・分组函数可以在没有分组的时候单独使用，可是却不能出现其他的查询字段

				分组函数单独使用：
			
			SELECT COUNT(empno) FROM emp;

				错误的使用，出现了其他的字段
			
			SELECT empno,COUNT(empno) FROM emp;

				・如果现在要进行分组的话，则SELECT子句之后，只能出现分组的字段和统计函数，其他的字段不能出现

				正确做法：

			SELECT job, COUNT(empno), AVG(sal)
			FROM emp
			GROUP BY job;
				
				错误的做法：

			SELECT deptno, job, COUNT(empno), AVG(sal)
			FROM emp
			GROUP BY job;

				・分组函数允许嵌套，但是嵌套之后的分组函数的查询之中不能再出现任何的其他字段。
				
			范例：按照职位分组，统计平均工资最高的工资
				・先统计出各个职位的平均工资
 
			SELECT job, AVG(sal)
			FROM emp
			GROUP BY job;			
				
				・平均工资最高的工资
			
			SELECT job, MAX(AVG(sal))
			FROM emp
			GROUP BY job;

			范例：查询出每个部门的名称，部门的人数，平均工资
				・确定所需要的数据表
					|-dept表：每个部门的名称
					|-emp表：统计出部门的人数，平均工资
				・确定已知的关联字段：emp.deptno = dept.deptno

				将dept表和emp表的数据关联：

			SELECT d.dname, e.empno, e.sal
			FROM dept d, emp e
			WHERE d.deptno = e.deptno;

				此时的查询结果中，可以发现在dname字段显示除了重复的数据，按照之前对分组的理解，只要数据重复了， 
				那么就有可能进行分组的查询操作，但是此时与之前的分组不太一样，之前的分组是针对于一张实体表进行的分组（emp、
				dept都属于实体表），但是对于以上的数据是通过查询结果显示的，所以是一张临时的虚拟表，但是不管是否是实体表
				还是虚拟表，只要是有重复，那么就直接进行分组。

			SELECT d.dname, COUNT(e.empno), AVG(e.sal)
			FROM dept d, emp e
			WHERE d.deptno = e.deptno
			GROUP BY d.dname;
				
				但是这个分组并不合适，因为部门一共有四个部门（因为现在已经引入了dept表，dept表存在了四个部门的信息），
				所以应该通过左右连接改变查询的结果。

						
			SELECT d.dname, COUNT(e.empno), NVL(AVG(e.sal), 0)
			FROM dept d, emp e
			WHERE d.deptno = e.deptno(+)
			GROUP BY d.dname;

				之前的所有操作都是针对于单字段分组的，而实际上分组操作之中也可以实现多字段分组。

			范例：要求显示每个部门的编号，名称，位置，部门的人数，平均工资
				・确定所需要的数据表
					|-dept表：每个部门的编号，名称，位置
					|-emp表：统计出部门的人数，平均工资
				・确定已知的关联字段：emp.deptno = dept.deptno

				将emp和dept表关联查询：

			SELECT d.deptno, d.dname, d.loc, e.empno, e.sal
			FROM dept d, emp e
			WHERE d.deptno = e.deptno(+);
			
				此时存在了重复数据，而且这个重复的数据平均在了三列上（deptno，dname，loc），所以在分组上的GROUP BY 子句中
				就可以写上三个字段：

			SELECT d.deptno, d.dname, d.loc, COUNT(e.empno), NVL(AVG(e.sal),0)
			FROM dept d, emp e
			WHERE d.deptno = e.deptno(+)
			GROUP BY d.deptno, d.dname, d.loc;

				以上就是多字段分组，但是不管是单字段还是多字段，一定要有一个前提，存在了重复数据。

			范例：要求统计出每个部门的详细信息，并且要求这些部门的平均工资高于2000
				在以上程序的基础上完成开发，在之前唯一学习过的限定查询的语法只有WHERE子句，
				所以下面先使用WHERE完成要求。

			
			SELECT d.deptno, d.dname, d.loc, COUNT(e.empno) mycount, NVL(AVG(e.sal),0) myavg
			FROM dept d, emp e
			WHERE d.deptno = e.deptno(+) AND AVG(E.sal)>2000
			GROUP BY d.deptno, d.dname, d.loc;

				现在出现了如下的错误提示:

			WHERE d.deptno = e.deptno(+) AND AVG(E.sal)>2000
                                    *
			第 3 行出现错误:
			ORA-00934: 此处不允许使用分组函数

			本错误提示的核心意思就是在WHERE子句之中不能使用统计函数，之所以在WHERE子句之中不能使用，
			实际上跟WHERE子句的主要功能有关，WHERE的主要功能是从全部的数据之中取出部分的数据。
			如图1-4所示。
			此时如果要对分组后的数据再次进行过滤，则使用HAVING子句完成，那么此时的SQL语法格式如下：

			SELECT [DISTINCT] *|分组字段1 [别名] [,分组字段2 [别名]....] | 统计函数
			FROM 表名称 [别名],[表名称 [别名],....]
			[WHERE 条件(S)] 
			[GROUP BY 分组字段1 [, 分组字段2,....]]
			[HAVING 分组后的过滤条件（可以使用统计函数）]
			[ORDER BY 排序字段 [ASC|DESC] [,字段 [ASC|DESC],...]] ;

			下面使用HAVING进行过滤

			SELECT d.deptno, d.dname, d.loc, COUNT(e.empno) mycount, NVL(AVG(e.sal),0) myavg
			FROM dept d, emp e
			WHERE d.deptno = e.deptno(+)
			GROUP BY d.deptno, d.dname, d.loc
			HAVING AVG(sal)>2000;

			注意点：WHERE和HAVING的区别
				・WHERE:是在执行GROUP BY操作之前进行的过滤，表示从全部数据之中筛选出部分的数据，
					在WHERE之中，不能使用统计函数。
				`HAVING:实在GROUP BY分组之后的再次过滤，可以在HAVING子句中使用统计函数。

			思考题：显示非销售人员的工作名称以及从事同一工作雇员的月工资总和，并且要满足从事同一工作的雇员的月工资
			合计大于￥5000，输出结果按月工资的合计升序排序
				第一步：查询出所有的非销售人员的信息

			SELECT * FROM emp 
			WHERE job<>'SALESMAN';

				第二步：按照职位进行分组，并且使用SUM函数统计
			
			SELECT job, SUM(sal)
			FROM emp 
			WHERE job<>'SALESMAN'
			GROUP BY job;

				第三步：月工资的合计是通过统计函数查询的，所以现在这个对分组后的过滤要使用HAVING子句完成
			
			SELECT job, SUM(sal) 
			FROM emp 
			WHERE job<>'SALESMAN'
			GROUP BY job
			HAVING SUM(sal)>5000;

				第四步：按照升序排序

			SELECT job, SUM(sal) sum
			FROM emp 
			WHERE job<>'SALESMAN'
			GROUP BY job
			HAVING SUM(sal)>5000
			ORDER BY sum ASC;

			以上的题目就融合分组操作的大部分语法的使用，而且以后遇到问题，要慢慢分析。

	子查询（核心重点）：
		子查询 = 简单查询 + 限定查询 + 多表查询 + 统计查询的综合体
		在之前强调过多表查询不建议大家使用，因为性能很差，但是多表查询最有利的替代者就是子查询，
		所以子查询在实际的开发之中使用的相当的多。所谓的子查询指的就是在一个查询之中嵌套了其他的若干查询，
		嵌套子查询之后的查询SQL语法如下：(子查询用括号括起来)

		
		SELECT [DISTINCT] *|分组字段1 [别名] [,分组字段2 [别名]....] | 统计函数, (
			SELECT [DISTINCT] *|分组字段1 [别名] [,分组字段2 [别名]....] | 统计函数
			FROM 表名称 [别名],[表名称 [别名],....]
			[WHERE 条件(S)] 
			[GROUP BY 分组字段1 [, 分组字段2,....]]
			[HAVING 分组后的过滤条件（可以使用统计函数）]
			[ORDER BY 排序字段 [ASC|DESC] [,字段 [ASC|DESC],...]] ;)
		FROM 表名称 [别名],[表名称 [别名],....], (
			SELECT [DISTINCT] *|分组字段1 [别名] [,分组字段2 [别名]....] | 统计函数
			FROM 表名称 [别名],[表名称 [别名],....]
			[WHERE 条件(S)] 
			[GROUP BY 分组字段1 [, 分组字段2,....]]
			[HAVING 分组后的过滤条件（可以使用统计函数）]
			[ORDER BY 排序字段 [ASC|DESC] [,字段 [ASC|DESC],...]] ;)
		[WHERE 条件(S) (
			SELECT [DISTINCT] *|分组字段1 [别名] [,分组字段2 [别名]....] | 统计函数
			FROM 表名称 [别名],[表名称 [别名],....]
			[WHERE 条件(S)] 
			[GROUP BY 分组字段1 [, 分组字段2,....]]
			[HAVING 分组后的过滤条件（可以使用统计函数）]
			[ORDER BY 排序字段 [ASC|DESC] [,字段 [ASC|DESC],...]] ;)] 
		[GROUP BY 分组字段1 [, 分组字段2,....]]
		[HAVING 分组后的过滤条件（可以使用统计函数）]
		[ORDER BY 排序字段 [ASC|DESC] [,字段 [ASC|DESC],...]] ;

		理论上子查询可以出现在查询语句的任何位置上，但是从个人而言，子查询出现在WHERE和FROM子句之中较多。
		以下的使用特点为个人总结，不是官方声明的：
			・WHERE：子查询一般只返回单行单列、多行单列、单行多列的数据，作为条件使用
			・FROM：子查询返回的一般是多行多列的数据，当作一张临时表出现，作为临时表使用

		范例：要求查询出工资比SMITH还要高的全部雇员信息
			要想完成本程序，首先要知道SMITH的工资是多少

		SELECT sal
		FROM emp
		WHERE ename='SMITH';

			由于此时返回的是单行单列的数据，所以这个子查询可以在WHERE中出现

		SELECT * FROM emp
		WHERE sal>(
			SELECT sal
			FROM emp
			WHERE ename='SMITH');

		范例：要求查询出高于公司平均工资的全部雇员信息
			公司的平均工资应该使用AVG()函数求出

		SELECT AVG(sa) FROM emp;

	
			此时返回的是单行单列的数据，所以这个子查询可以在WHERE中出现

		SELECT * FROM emp
		WHERE sal<(
			SELECT AVG(sal) FROM emp);

			以上所返回的是单行单列，但是在子查询之中，也可以返回单行多列的数据，只是这种子查询很少出现。

		范例：子查询返回单行多列数据

		SELECT * FROM emp
		WHERE (job, sal) = (
			SELECT job, sal
			FROM emp
			WHERE ename = 'ALLEN');

		如果现在的子查询返回的是多行单列数据的话，这个时候就需要使用三种判断符判断了：IN、ANY、ALL

		1、IN操作符：用于指定一个子查询的判断范围
			这个操作符的使用实际上与之前讲解的IN是一样的，唯一不同的是，里面的范围由子查询指定了。

		SELECT * FROM emp
		WHERE  sal IN(
			SELECT sal
			FROM emp
			WHERE job='MANAGER');
			
			但是在使用IN的时候还要注意NOT IN 的问题，如果使用NOT IN 操作，在子查询之中，
			如果有一个内容是null，则不会查询出任何的结果。

		2、ANY操作符：与每一个内容相匹配，有三种匹配方式
			・=ANY：功能与IN操作符是完全一样的		
		
		SELECT * FROM emp
		WHERE  sal = ANY(
			SELECT sal
			FROM emp
			WHERE job='MANAGER');

			・>ANY：比子查询中返回记录最小的还要大的数据

		SELECT * FROM emp
		WHERE  sal >ANY(
			SELECT sal
			FROM emp
			WHERE job='MANAGER');

			・<ANY：比子查询中返回记录最大的还要小的数据

		SELECT * FROM emp
		WHERE  sal <ANY(
			SELECT sal
			FROM emp
			WHERE job='MANAGER');
		
		3、ALL操作符：与每一个内容相匹配，有两种匹配形式：
			・>ALL：比子查询中返回的最大的记录还要大

		SELECT * FROM emp
		WHERE  sal >ALL(
			SELECT sal
			FROM emp
			WHERE job='MANAGER');

			・<ALL：比子查询中返回的最小的记录还要小

		SELECT * FROM emp
		WHERE  sal <ALL(
			SELECT sal
			FROM emp
			WHERE job='MANAGER');
		
		以上的所有子查询都是在WHERE子句中出现的，那么下面再来观察在FROM子句中出现的子查询，
		这个子查询一般都返回的是多行多列的数据，当作一张临时表的方式来处理。

		范例：查询出每个部门的编号，名称，位置，部门人数，平均工资
			・回顾：最早的时候使用的是多字段分组统计完成的

		SELECT d.deptno, d.dname, d.loc, COUNT(e.empno), AVG(sal)
		FROM emp e, dept d
		WHERE e.deptno(+)=d.deptno
		GROUP BY d.deptno, d.dname, d.loc;
			
			这个时候实际上是产生了笛卡尔积，一共产生了56条记录

			・新的解决方案：通过子查询完成，所有的统计查询只能在GROUP BY中出现，
				所以在子查询之中负责统计数据，而在外部的查询之中，负责将统计数据和dept表数据相统一。

		SELECT d.deptno, d.dname, d.loc, temp.count, temp.avg
		FROM dept d, (
			SELECT deptno dno, COUNT(empno) count, AVG(sal) avg
			FROM emp
			GROUP BY deptno) temp
		WHERE d.deptno=temp.dno(+);

			现在的程序中所操作的数据量：
				・子查询中统计的记录是14条记录，最终统计的显示结果是3条记录
				・dept表之中一共有4条记录
				・如果现在产生笛卡尔积的话只有12条记录，再加上雇员的14条记录，一共才26条记录
			通过以上的分析，可以发现，使用子查询的确要比使用多表查询更加节省性能，
			所以在开发之中子查询出现是最多的，而且在给出一个不成文的规定：大部分情况下，
			如果最终的查询结果之中需要出现SELECT子句，但是又不能直接使用统计函数的时候，
			就在子查询中统计信息，即：有复杂统计的地方大部分都需要子查询。
			 
	数据库的更新操作（重点）：
		DML操作语法之中，除了查询之外还有数据库的更新操作，数据的更新操作主要指的是：增加、修改、删除数据，
		但是考虑到emp表以后还要继续使用，所以下面先将emp表复制一份，输入如下指令：

		CREATE TABLE myemp AS SELECT * FROM emp;

		这种语法是oracle中支持的操作，其他数据不一样。
	
		数据增加：
			如果现在想要实现数据的增加操作，则可以使用如下的语法完成：

			INSERT INTO 表名称 [(字段1, 字段2, ...)] VALUES (值1, 值2, ...);
		
			如果想要进行增加数据的话，则以下的几中数据类型要分别处理：
				・增加数字：直接编写数字，例如：123
				・增加字符串：字符串应该使用单引号声明
				・增加DATE数据;
					|-第一种：可以按照已有的字符串的格式编写字符串，例如:“'17-12月-80'”
					|-第二种：利用TO_DATE()函数将字符串变为DATE型数据
					|-第三种：如果设置的时间为当前系统时间，则使用SYSDATE

			可是对于数据的增加也有两种操作格式：完整型、简便型

			范例：增加数据--完整语法编写

			INSERT INTO myemp (empno, ename, hiredate, sal, mgr, job, comm)
				VALUES (8888, '张三', TO_DATE('1960-08-17', 'yyyy-mm-dd'), 8000, 7369, '清洁工', 1000);

			INSERT INTO myemp (empno, ename, hiredate, sal, mgr, job, deptno)
				VALUES (8888, '李四', SYSDATE, 3000, 7369, '清洁工', 30);

			范例：增加数据--简便语法，不写增加的列名称

			INSERT INTO myemp VALUES (8888, '李四', '清洁工', 7369, SYSDATE, 3000, null, 30);

			很明显虽然简便语法代码少了，可是这种操作并不可取，所以在实际的开发之中，没有任何一个人会写简便语法，
			这样根本就不利于程序的维护，都编写完整的操作。

		数据修改：
			如果想要修改表中已有的数据，则可以按照如下的语法进行：

			UPDATE 表名称 SET 更新字段1=更新值1, 更新字段2=更新值2, ....[WHERE 更新条件(s)];

			范例：更新雇员编号是7369的基本工资为5000，奖金为2000，职位修改为MANAGER，雇佣日期修改为今天

			UPDATE myemp SET sal=5000, comm=2000, job='MANAGER', hiredate=SYSDATE WHERE empno=7369;

			范例：所有人的工资改为7500

			UPDATE myemp SET sal=7500;

			如果更新的时候不加上更新条件，则意味着更新全部的数据，但是这种做法绝对不可取，如果现在
			表中的数据量较大的话，这种更新所耗费的时间是相当长的，而且性能也会明显降低。

		数据删除：
			当数据不再需要之后，就可以使用以下的语法删除数据：

			DELETE FROM 表名称 [WHERE 删除条件(s)];

			与更新一样，如果没有写删除条件的话，则表示删除全部数据

			范例：删除所有在1987年雇佣的雇员

			DELETE FROM myemp WHERE TO_CHAR(hiredate, 'yyyy')=1987;

				一定要记住，如果删除的时候没有匹配条件的数据存在，则更新的记录为0，包括更新操作也是一样。

			范例：删除表中的全部数据

			DELETE FROM myemp;
				
				一般对于删除操作而言，尽可能少去使用，包括以后在进行系统开发的时候，对于所有的删除操作之前实际上
				都建议大家先给出一个确认的提示框，以防止用户误删除。

	事务处理：
		对于数据表的操作，很明显查询要比更新操作更加安全，因为更新操作有可能会出现错误，
		以导致没有按照既定的要求正确完成更新操作。
		但是很多时候更新有可能会有多条指令共同完成，例如：以银行转账的方式为例：
			・判断A的账户上是否有5000w;
			・判断B账户是否存在并且状态是否正常
			・从A的账户上移走5000w
			・向B的账户之中增加5000w
			・向银行支付手续费用5000

		以上的五个数据操作是一个整体，可以理解为一个完整的业务，如果这之中第三点出错了，那么其它的操作呢？
		所有的操作都应该不再执行，并且回归到最原始的状态，而这一个操作流程就是事务操作。
		所有的事务处理操作都是针对于每一个session进行的，在oracle数据库之中，把每一个连接到数据库上的用户都称为一个session，
		每一个session之间彼此独立，不会有任何的通讯，而每一个session独享自己的事务控制，而事务控制之中主要使用两个命令;
			・事务回滚：ROLLBACK，更新操作回到原点
			・事务的提交：COMMIT，真正的发出更新的操作，一旦提交之后无法回滚
		但是这样一来也会出现一些问题，例如：某一个session在更新数据表的时候还没有提交事务，其他的session是无法更新的，
		必须等待之前的session提交之后才可以
		这种问题从大的方面上讲可以称为死锁，但是在oracle之中死锁有很多的种类，这些与开发者没有太大的关系，是右DBA负责的。
		所有的数据库更新一定都会受到事务的控制。
		
	数据伪列（了解）：
		数据伪列指的是用户不需要处理的列，而是有oracle自行维护的数据列，在oracle之中有两个数据伪列：
		ROWNUM、ROWID

		ROWNUM(核心重点)：
			 ROWNUM从单词含义上讲应该表示的是行号，实际上ROWNUM为每一个显示的记录都会自动的随着查询生成行号，
			 例如，下面通过两个代码观察：

			 SELECT ROWNUM, empno, ename, job, hiredate, sal FROM emp;
				此时的ROWNUM行号不是永久固定的

			 SELECT ROWNUM, empno, ename, job, hiredate, sal FROM emp WHERE deptno=30;
				是每次动态的重新生成的，那么既然有了ROWNUM之后，下面就可以实现数据的部分显示

			范例：查询前五条记录

			 SELECT ROWNUM, empno, ename, job, hiredate, sal FROM emp 
			 WHERE ROWNUM<=5;

			 范例：查询6-10条记录
				・按照正常的思维肯定是直接进行BETWEEN...AND的判断

			SELECT ROWNUM, empno, ename, job, hiredate, sal FROM emp 
			 WHERE ROWNUM BETWEEN 6 AND 10;

				这个时候并没有返回任何数据，因为ROWNUM不是真实列，而想要真正的实现这种查询思路是：
				先查询前10条记录，之后再显示后5条记录，要依靠子查询完成。	
			
			SELECT * FROM(
				SELECT ROWNUM rn, empno, ename, job, hiredate, sal FROM emp 
				WHERE ROWNUM<=10) temp
			WHERE temp.rn>5;

				如果现在按照这种思路，下面就可以给出日后程序中所需要分页的功能实现。

			范例：显示前5条记录
				当前所在页（cunentPage）为1
				每页显示的记录长度（lineSize）为5
				
				第一页：

			SELECT * FROM(
				SELECT ROWNUM rn, empno, ename, job, hiredate, sal FROM emp 
				WHERE ROWNUM<=5) temp
			WHERE temp.rn>0;

			范例：显示中间的五条记录
				当前所在页（cunentPage）为2
				每页显示的记录长度（lineSize）为10
				
				第二页：

			SELECT * FROM(
				SELECT ROWNUM rn, empno, ename, job, hiredate, sal FROM emp 
				WHERE ROWNUM<=10) temp
			WHERE temp.rn>5;
			
			范例：显示第三页的内容
				当前所在页（cunentPage）为3
				每页显示的记录长度（lineSize）为15
				
				第二页：

			SELECT * FROM(
				SELECT ROWNUM rn, empno, ename, job, hiredate, sal FROM emp 
				WHERE ROWNUM<=15) temp
			WHERE temp.rn>10;

			以上的程序就是分页显示操作的核心代码，以后一定要使用的，必须理解
			
		ROWID(了解)
			ROWID表示的是每一行数据保存的物理地址的编号，例如，观察如下的查询：

			SELECT ROWID, deptno, dname, loc FROM dept;
			
			每一条记录的ROWID都不会重复，所以即便表中所有列的数据内容重复了，ROWID也是不会重复的，
			而且以一个ROWID为例，说明ROWID组成，例如:AAAL+XAAEAAAAANAAA
				・数据对象号：AAAL+X
				・相对文件号：AAE
				・数据块号：AAAAAN
				・数据行号：AAA
			面试题：请删除表中的重复记录
				现在项目之中由于管理不善，所以导致出现了许多重复的信息，为了说明问题，下面为表中增加若干条记录

			INSERT INTO dept(deptno,dname,loc) VALUES (21,'RESEARCH','DALLAS');
			INSERT INTO dept(deptno,dname,loc) VALUES (31,'SALES','CHCAGO');
			INSERT INTO dept(deptno,dname,loc) VALUES (32,'SALES','CHCAGO');
			INSERT INTO dept(deptno,dname,loc) VALUES (41,'OPERATIONS','BOSTON');
			INSERT INTO dept(deptno,dname,loc) VALUES (42,'OPERATIONS','BOSTON');
			INSERT INTO dept(deptno,dname,loc) VALUES (43,'OPERATIONS','BOSTON');
			COMMIT;

				此时的数据显示是：如图1-5所示

				现在要求删除掉所有重复的记录，保留最早增加的记录内容

				最终显示结果：如图1-6所示
		
				先按照查询的方式做，首先找到所有重复的数据，重复的数据就比较容易了，按照部门名称及位置分组，之后统计个数，
				如果个数大于1，则表示重复

			SELECT dname, loc, MIN(ROWID)
			FROM dept
			GROUP BY dname, loc
			HAVING COUNT(deptno)>1;
				
				此时返回的三个ROWID，与最早的ROWID比较一下，如图1-7所示
				数据插入的早，ROWID就小，所以下一步首先必须确定的是不能删除的ROWID，去掉之前的显示（COUNT()>1）,
				表示按照部门名称及位置分组，取出每一个最小的ROWID

			SELECT MIN(ROWID)
			FROM dept
			GROUP BY dname, loc;

				以上的数据是不能删除的，所以下面编写DELETE语句
			
			DELETE FROM dept
			WHERE ROWID NOT IN (
				SELECT MIN(ROWID)
				FROM dept
				GROUP BY dname, loc);
			COMMIT;

				此时就是根据ROWID完成的，而这道题目也就是ROWID现在为止的唯一可以看得见的作用。
				在所有的伪列之中，只有ROWNUM是以后开发之中最为重要的部分，一定要掌握，而对于ROWID知道就行了，
				不必做太深入的了解。
			
	复杂查询：
		1、列出至少有一个员工的所有部门编号、名称，并统计出这些部门的平均工资、最低工资、最高工资。
			・确定所需要的数据表：
				|-emp表：可以查询出员工的数量
				|-dept表：部门名称
				|-emp表：统计信息
			・确定已知的关联字段:emp.deptno = dept.deptno

			第一步：找出至少有一个员工的部门编号
			
			SELECT deptno, COUNT(empno)
			FROM emp
			GROUP BY deptno
			HAVING COUNT(empno)>1;

			第二步：找到部门名称，肯定使用部门表，因为现在的数据量较小，所以可以将之前的emp表和dept表连个进行连接，
			统一采用多字段分组的方式查询

			SELECT d.deptno, d.dname, COUNT(e.empno)
			FROM emp e, dept d
			WHERE e.deptno=d.deptno
			GROUP BY d.deptno, d.dname
			HAVING COUNT(e.empno)>1;

			第三步：依然需要继续统计

			SELECT d.deptno, d.dname, COUNT(e.empno), AVG(sal), MIN(sal), MAX(sal)
			FROM emp e, dept d
			WHERE e.deptno=d.deptno
			GROUP BY d.deptno, d.dname
			HAVING COUNT(e.empno)>1;

		2、列出薪金比“SMITH”或“ALLEN”多的所有员工的编号，姓名，部门名称，及其领导姓名
				・确定所需要的数据表：
					|-emp表：查询出“SMITH”或“ALLEN”的工资
					|-emp表：最终的显示需要编号，姓名
					|-emp表：领导的姓名，自身关联
					|-dept表：部门名称
				・确定已知的关联字段:
					|-雇员和领导：emp.mgr=memp.empno
					|-雇员和部门：emp.deptno=dept.deptno

				第一步:找出“SMITH”或“ALLEN”的工资

				SELECT sal
				FROM emp 
				WHERE ename IN('SMITH', 'ALLEN');

				第二步：以上的查询返回的是多行单列的记录，按照子查询的要求在WHERE子句中写合适，所以这个时候将上面的查询
				作为一个子查询出现，继续查询符合此要求的员工的编号，姓名

				SELECT e.empno, e.ename
				FROM emp e
				WHERE e.sal>ALL(
					SELECT sal
					FROM emp 
					WHERE ename IN('SMITH', 'ALLEN'));

				第三步：查询出部门的名称，引入部门表，同时增加消除笛卡尔积的条件
			
				
				SELECT e.empno, e.ename, d.dname
				FROM emp e, dept d
				WHERE e.sal>ALL(
					SELECT sal
					FROM emp 
					WHERE ename IN('SMITH', 'ALLEN'))
					AND e.deptno=d.deptno;

				第四步：领导的信息需要emp表自身关联

				SELECT e.empno, e.ename, d.dname, m.ename
				FROM emp e, dept d, emp m
				WHERE e.sal>ALL(
					SELECT sal
					FROM emp 
					WHERE ename IN('SMITH', 'ALLEN'))
					AND e.deptno=d.deptno
					AND e.mgr=m.empno(+);
			
		3、列出所有员工的编号，姓名以及其直接上级的编号，姓名，显示的结果按领导年工资的降序排序
			・确定所需要的数据表：
				|-emp表：员工的编号，姓名
				|-emp表：领导的编号，姓名，计算年薪
			・确定已知的关联字段:emp.mgr=memp.empno

			SELECT e.empno, e.ename, m.empno, m.ename, (m.sal+NVL(m.comm, 0)) *12 income
			FROM emp e, emp m
			WHERE e.mgr=m.empno(+)
			ORDER BY income DESC;

总结：
	1、多表查询：在进行查询语句编写的时候，一定要确定所需要关联的数据表，而且只要是表的关联查询，就一定会存在笛卡尔积的问题，使用关联字段消除此问题
		在使用多表查询的时候要考虑到左右连接的问题，oracle之外的数据库可以使用SQL：1999语法控制左右连接
	2、所有的统计函数是用于进行数据统计操作的，而统计要在分组中进行（或者是单独使用），分组使用GROUP BY子句，
		是在某一列上存在重复数据的时候才会使用分组操作，而分组后的过滤使用HAVING子句完成，所有的分组函数可以嵌套，但是嵌套之后的分组函数之中不能在有其他的查询字段，
		包括分组字段。
	3、子查询：结合限定查询，多表查询，分组统计查询完成各个复杂查询的操作，子查询一般在WHERE和FROM之后出现较多。如果数据是多行多列的数据就放在FROM之后，作为临时表使用。其他的形式放在WHERE之后，作为查询条件使用
	4、数据库的更新操作一定要受到事务的控制，事务的两个命令：COMMIT、ROLLBACK,每一个连接到数据库上的用户都使用一个SESSION表示。
	5、数据表的分页查询显示依靠ROWNUM为例，这个在以后的开发之中必定100%要用。



		・确定所需要的数据表：
		・确定已知的关联字段：

习题讲解：
	4、列出受雇日期早于其直接上级的所有员工的编号、姓名、部门名称、部门位置、部门人数
		・确定所需要的数据表：
			|-emp表：雇员的编号、姓名
			|-emp表：求出领导的工作日期
			|-dept表：部门名称、位置
			|-emp表，统计部门，人数
		・确定已知的关联字段：
			|-雇员和部门：emp.deptno=dept.detpno
			|-雇员和领导：emp.mar=memp.empno

		第一步：列出受雇日期早于其直接上级的所有员工的编号、姓名----自身关联emp表

		SELECT e.empno, e.ename
		FROM emp e, emp m
		WHERE e.mgr=m.empno(+) AND e.hiredate<m.hiredate;

		第二步：加入部门信息，继续引入部门表

		SELECT e.empno, e.ename, d.dname, d.loc
		FROM emp e, emp m, dept d
		WHERE e.mgr=m.empno(+) AND e.hiredate<m.hiredate AND e.deptno=d.deptno;
		
			此时的笛卡尔积：emp表的14条 * emp表的14条 * dept表的4条
			
		第三步：统计部门人数，此时由于要使用统计函数，而且以上的查询也无法直接的出现统计函数，所以使用子查询完成
		
		SELECT e.empno, e.ename, d.dname, d.loc, temp.count
		FROM emp e, emp m, dept d,(
			SELECT deptno dno, COUNT(empno) count
			FROM emp
			GROUP BY deptno) temp
		WHERE e.mgr=m.empno(+) 
			AND e.hiredate<m.hiredate
			AND e.deptno=d.deptno
			AND temp.dno=e.deptno;

				当查询显示的时候需要显示信息，但是又不能直接使用统计函数查询的话，通过子查询在FROM子句之后进行统计。

	5、列出部门名称和这些部门的员工信息（数量、平均工资）， 同时列出那些没有员工的部门
		・确定所需要的数据表：
			|-dept表：部门信息
			|-emp表：求出所有的统计信息
		・确定已知的关联字段：emp.deptno=dept.deptno

		第一步：多字段分组

		SELECT d.dname, d.deptno, d.loc, COUNT(e.empno), AVG(sal)
		FROM emp e, dept d
		WHERE e.deptno(+)=d.deptno
		GROUP BY d.dname, d.deptno, d.loc;

	6、列出所有“CLERK”办事员的姓名及其部门名称，部门人数，工资等级
		・确定所需要的数据表：
			|-emp表：找到办事员的姓名
			|-dept表：部门名称
			|-emp表：统计求出部门人数
			|-salgrade表：查询工资等级
		・确定已知的关联字段：
			|-emp表和dept表：emp.deptno=dept.deptno
			|-emp表和salgrade表：emp.sal BETWEEN salgrade.losal AND salgrade.hisal

		第一步：找到所有办事员的姓名

		SELECT e.ename
		FROM emp e
		WHERE job='CLERK';

		第二步：找到部门信息，引入dept表，同事增加消除笛卡尔积的条件

		SELECT e.ename, d.dname
		FROM emp e, dept d
		WHERE job='CLERK' AND e.deptno=d.deptno;

		第三步：部门人数需要额外统计，但是本程序的查询里面已经不可能继续使用COUNT()函数，所以写子查询统计

		SELECT e.ename, d.dname, temp.count
		FROM emp e, dept d,(
			SELECT deptno dno, COUNT(empno) count
			FROM emp
			GROUP BY deptno) temp
		WHERE job='CLERK' AND e.deptno=d.deptno AND e.deptno=temp.dno;

		第四步：雇员的工资等级，继续引入salgrade表

		SELECT e.ename, d.dname, temp.count, s.grade
		FROM emp e, dept d,(
			SELECT deptno dno, COUNT(empno) count
			FROM emp
			GROUP BY deptno) temp, salgrade s
		WHERE job='CLERK' 
			AND e.deptno=d.deptno 
			AND e.deptno=temp.dno
			AND e.sal BETWEEN s.losal AND s.hisal;

	7、列出最低薪金大于1500的各种工作及从事此工作的全部雇员人数及所在部门名称，位置，平均工资
		・确定所需要的数据表：
			|-emp：最低薪金>1500的工作肯定需要使用emp表统计求出，以及可以求出雇员人数
			|-dept表：求出此雇员所在的部门信息
			|-emp表：统计求出部门的平均工资
		・确定已知的关联字段：emp.deptno=dept.deptno

		第一步:使用emp表按照job分组，列出最低工资>1500（HAVING）和人数

		SELECT e.job, COUNT(e.empno)
		FROM emp e
		GROUP BY e.job
		HAVING MIN(e.sal)>1500;

		第二步：查询出雇员所在的部门信息，但是以上的查询能跟dept表有联系么？
			以上的查询和dept表之间并没有关联字段，那么如果没有关联字段，一定会有笛卡尔积产生，
			但是多表查询必须咬消除笛卡尔积，所以必须照联系
				・以上的查询可以和emp表的job字段关联
				・要引入的dept表也可以和emp表的deptno字段关联
			
		SELECT temp.job, temp.count, d.dname, e.ename
		FROM dept d, (
			SELECT e.job job, COUNT(e.empno) count
			FROM emp e
			GROUP BY e.job
			HAVING MIN(e.sal)>1500) temp, emp e
		WHERE e.job=temp.job AND e.deptno=d.deptno;

		第三步：求出部门平均工资，使用mep表在子查询中统计

		SELECT temp.job, temp.count, d.dname, e.ename,res.avg
		FROM dept d, (
			SELECT e.job job, COUNT(e.empno) count
			FROM emp e
			GROUP BY e.job
			HAVING MIN(e.sal)>1500) temp, emp e, (
				SELECT deptno dno, AVG(sal) avg
				FROM emp
				GROUP BY deptno) res
		WHERE e.job=temp.job
			AND e.deptno=d.deptno
			AND res.dno=e.deptno;
		
			本题目之所以出的如此复杂，目的时训练大家寻找关联字段的能力，但是本题目没有任何的意义，知道就行了

	8、列出在部门“SALES”（销售部）工作的员工姓名，基本工资，雇佣日期，部门名称，假定不知道销售部的部门编号
		・确定所需要的数据表
			|-emp表：员工姓名，基本工资，雇佣日期
			|-dept表：找到销售部的部门编号，部门名称
		・确定已知的关联字段：emp.deptno=d.deptno
	
		SELECT e.ename, e.sal, e.hiredate, d.dname, d.deptno
		FROM emp e, dept d
		WHERE e.deptno=d.deptno
			AND d.dname='SALES';

	9、列出薪金高于公司平均薪金的所有员工，所在部门，上级领导，公司的工资等级
		・确定所需要的数据表：
			|-emp表：可以求出公司的平均薪金
			|-emp表：员工信息
			|-dept表：部门的信息
			|-emp表：领导的信息
			|salgrade表：工资等级
		・确定已知的关联字段：	
			|-雇员和部门：emp.deptno=dept.deptno
			|-雇员和领导：emp.mgr=memp.empno
			|-雇员和工资等级：emp.sal BETWEEN salgrade.losal AND salgrade.hisal

		第一步：求出公司的平均薪金

		SELECT AVG(sal)
		FROM emp;

		第二步：将以上的子查询放在WHERE子句之中，作为一个查询的条件，求出满足次条件的雇员信息

		SELECT e.empno, e.ename, e.job, e.sal
		FROM emp e
		WHERE e.sal>(
			SELECT AVG(sal)
			FROM emp);

		第三步：找到部门的名称

		SELECT e.empno, e.ename, e.job, e.sal, d.dname
		FROM emp e, dept d
		WHERE e.sal>(
			SELECT AVG(sal)	FROM emp) 
			AND e.deptno=d.deptno;

		第四步;找到领导的信息

		SELECT e.empno, e.ename, e.job, e.sal, d.dname, d.loc, m.ename
		FROM emp e, dept d, emp m
		WHERE e.sal>(
			SELECT AVG(sal)	FROM emp) 
			AND e.deptno=d.deptno
			AND e.mgr=m.empno(+);
	
		第五步：找到工资等级
	
		SELECT e.empno, e.ename, e.job, e.sal, d.dname, m.ename, s.grade
		FROM emp e, dept d, emp m, salgrade s
		WHERE e.sal>(
			SELECT AVG(sal)	FROM emp) 
			AND e.deptno=d.deptno
			AND e.mgr=m.empno(+)
			AND e.sal BETWEEN s.losal AND s.hisal;

	10、列出与“SCOTT”从事相同工作的所有员工及部门名称，部门人数
		・确定所需要的数据表：
			|-emp表：找到SCOTT的工作
			|-emp表：员工的信息
			|-dept靠：部门名称
			|-emp表：部门人数
		・确定已知的关联字段：emp.deptno=dept.deptno

		第一步：找到SOCTT的工作
		
		SELECT job
		FROM emp
		WHERE ename='SCOTT';

		第二步：以上的子查询返回的是但行单列的数据，所以可以在WHERE子句中出现，以这个条件查找满足要求的雇员信息

		SELECT e.ename, e.empno, e.job
		FROM emp e
		WHERE e.job=(
			SELECT job
			FROM emp
			WHERE ename='SCOTT')
			AND e.ename<>'SCOTT';

		第三步：找到部门名称

		SELECT e.ename, e.empno, e.job, d.dname
		FROM emp e, dept d
		WHERE e.job=(
			SELECT job
			FROM emp
			WHERE ename='SCOTT')
			AND e.ename<>'SCOTT'
			AND e.deptno=d.deptno;

		第四步：找到部门人数，需要统计，所以在FROM子句之中编写

		SELECT e.ename, e.empno, e.job, d.dname, temp.count
		FROM emp e, dept d, (
			SELECT deptno dno, COUNT(empno) count
			FROM emp
			GROUP BY deptno) temp
		WHERE e.job=(
			SELECT job
			FROM emp
			WHERE ename='SCOTT')
			AND e.ename<>'SCOTT'
			AND e.deptno=d.deptno
			AND e.deptno=temp.dno;

	11、列出公司各个工资等级雇员的数量，平均工资
		・确定所需要的数据表：
			|-emp表：统计出数据
			|-salgrade表：得出工资等级
		・确定已知的关联字段：emp.sal BETWEEN salgrade.losal AND salgrade.hisal

		本程序实际上就是一个多字段分组而已，唯一不同的是，将分组条件设置为salgrade表中的字段

		SELECT s.grade, s.losal, s.hisal, COUNT(e.empno), AVG(e.sal)
		FROM emp e, salgrade s
		WHERE e.sal BETWEEN s.losal AND s.hisal
		GROUP BY s.grade, s.losal, s.hisal;

	12、列出薪金高于部门30工作的所有员工的姓名和薪金，部门名称
		・确定所需要的数据表：
			|-emp表：找出所有在30部门工作的雇员的工资
			|-emp表：找到最终显示的雇员姓名
			|-dept表：找到部门名称
		・确定已知的关联字段：emp.deptno=dept.deptno

		第一步：找到30部门工作的雇员的工资

		SELECT sal FROM emp WHERE deptno=30;

		第二步：高于30部门，使用ALL操作符,引入emp表，查询姓名和薪金

		SELECT e.empno, e.ename
		FROM emp e
		WHERE sal>ALL(SELECT sal FROM emp WHERE deptno=30);

		第三步：找到部门名称

		SELECT e.ename, e.sal, d.dname
		FROM emp e, dept d
		WHERE sal>ALL(SELECT sal FROM emp WHERE deptno=30)
			AND e.deptno=d.deptno;
	
	13、列出在每个部门工作的员工的数量，平均工资和平均服务期限
		・确定所需要的数据表：
			|-dept表：找到部门信息
			|-emp表：统计数量，平均工资，平均服务年限
		・确定已知的关联字段：emp.deptno=dept.deptno

		直接将dept和emp表关联，使用多字段分组即可，但是对于服务年限需要一个计算过程

		SELECT d.deptno, COUNT(e.empno), AVG(sal), AVG(MONTHS_BETWEEN(SYSDATE, e.hiredate)/12) year
		FROM emp e, dept d
		WHERE e.deptno=d.deptno
		GROUP BY d.deptno;

	14、列出所有员工的姓名，部门名称和工资
		・确定所需要的数据表：
			|-emp表：求出员工姓名，工资
			|-dept表：求出部门名称
		・确定已知的关联字段：emp.deptno=dept.deptno

		SELECT e.ename, d.dname, e.sal
		FROM emp e, dept d
		WHERE e.deptno=d.deptno;

	15、列出所有部门的详细信息和部门人数
		・确定所需要的数据表：
			|-emp表：统计信息
			|-dept表：查询部门信息
		・确定已知的关联字段：emp.deptno=dept.deptno

		SELECT d.deptno, d.dname, d.loc, COUNT(e.empno)
		FROM emp e, dept d
		WHERE e.deptno(+)=d.deptno
		GROUP BY d.deptno, d.dname, d.loc;

	16、列出各种工作的最低工资，以及从事此工作的雇员姓名
		・确定所需要的数据表：
			|-emp表：统计各个工作的最低工资
			|-emp表：查找出雇员姓名
		・确定已知的关联字段：

		第一步：按照职位统计各个职位的最低工资

		SELECT job, MIN(sal)
		FROM emp
		GROUP BY job;
		
		第二步:将以上的查询和emp表关联
	
		SELECT e.ename, temp.min
		FROM emp e, (
			SELECT job, MIN(sal) min
			FROM emp
			GROUP BY job) temp
		WHERE e.job=temp.job AND e.sal=temp.min;
	
	17、列出各个部门的MANAGER(经理)的最低薪金、姓名、部门名称、部门人数
		・确定所需要的数据表：
			|-emp表：找到经理的薪金，姓名
			|-dept表：找到部门名称
			|-emp表：统计部门人数
		・确定已知的关联字段：emp.deptno=dept.deptno

		第一步：找到所有部门经理最低工资

		SELECT deptno, MIN(sal)
		FROM emp
		WHERE job='MANAGER'
		GROUP BY deptno;

		第二步：找到姓名，但是以上的子查询不能再出现其他的字段

		SELECT e.ename, e.sal
		FROM emp e, (
			SELECT deptno dno, MIN(sal) sal
			FROM emp
			WHERE job='MANAGER'
			GROUP BY deptno) temp
		WHERE e.deptno=temp.dno AND e.sal=temp.sal AND e.job='MANAGER';
		
		第三步：找到部门的名称信息

		SELECT e.ename, e.sal, d.dname
		FROM emp e, (
			SELECT deptno dno, MIN(sal) sal
			FROM emp
			WHERE job='MANAGER'
			GROUP BY deptno) temp, dept d
		WHERE e.deptno=temp.dno 
			AND e.sal=temp.sal 
			AND e.job='MANAGER'
			AND e.deptno=d.deptno;

		第四步：统计部门人数

		SELECT e.ename, e.sal, d.dname, res.count
		FROM emp e, (
			SELECT deptno dno, MIN(sal) sal
			FROM emp
			WHERE job='MANAGER'
			GROUP BY deptno) temp, dept d, (
			SELECT deptno dno, COUNT(empno) count
			FROM emp
			GROUP BY deptno) res
		WHERE e.deptno=temp.dno 
			AND e.sal=temp.sal 
			AND e.job='MANAGER'
			AND e.deptno=d.deptno
			AND e.deptno=res.dno;

	18、列出所有员工的年工资，所在部门名称，按年薪从低到高排序
		・确定所需要的数据表：
			|-emp表：统计年工资
			|-dept表：部门名称
		・确定已知的关联字段：emp.deptno=dept.deptno

		SELECT e.ename, e.sal*12 income, d.dname
		FROM emp e, dept d
		WHERE e.deptno=d.deptno
		ORDER BY income;

	19、查出某个员工的上级主管及所在部门名称，并要求出这些主管中的薪水超过3000
		・确定所需要的数据表：
			|-emp表：员工的信息
			|-emp表：领导的信息
			|-dept表：部门名称
		・确定已知的关联字段：
			|-雇员和部门：emp.deptno=dept.deptno
			|-雇员和领导：emp.mgr=memp.empno

		SELECT DISTINCT m.ename, d.dname, m.sal
		FROM emp e, emp m, dept d
		WHERE m.deptno=d.deptno AND e.mgr=m.empno AND m.sal>3000;
		
	20、求出部门名称中，带“S”字符的部门员工的工资合计，部门人数
		・确定所需要的数据表：
			|-emp表：统计信息
			|-dept表：部门名称
		・确定已知的关联字段：emp.deptno=dept.deptno

		SELECT d.dname, SUM(e.sal), COUNT(e.empno)
		FROM emp e, dept d
		WHERE e.deptno(+)=d.deptno AND d.dname LIKE '%S%'
		GROUP BY d.dname;

	21、给任职日期超过30年或者在87年雇佣的雇员加薪，加薪原则：10部门增长10%，20部门增长20%，30部门增长30%,依次类推
		
		UPDATE emp SET
			sal=(1- deptno/100) * sal
		WHERE MONTHS_BETWEEN(SYSDATE, hiredate)/12>30
			OR TO_CHAR(hiredate,'yyyy') = 1987;

	以上所有题目作为DML操作的总结，这些题目结果都不重要，关键是解决问题的思路，这些只能通过代码不断练习