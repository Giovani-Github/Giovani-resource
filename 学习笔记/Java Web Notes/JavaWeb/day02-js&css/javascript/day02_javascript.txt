1、JavaScript的简介：
	* 是基于对象和事件驱动的脚本语言，应用于客户端
		- 基于对象：
			** 提供好了很多对象，可以直接拿过来使用
		- 事件驱动：
			** html做网站静态效果，JavaScript动态效果
		- 客户端：
			** 专门指的是浏览器
	* JavaScript的特点
		(1)交互性
			- 信息的动态交互
		(2) 安全性
			- JavaScript不能访问本地磁盘的文件
		(3) 跨平台性
			- 只要能够支持javascrip的浏览器，都可运行（在这里，浏览器相当于java虚拟机）
	* JavaScript和java的区别
		(1)java是孙公司，现在是oracle。JavaScript是网景公司。
		(2)JavaScript是基于对象的。java是面向对象的
		(3)java是强类型的语言，JavaScript是弱类型的语言
			- 比如：java里面 int i="10"不可以，而JavaScript里面：int i="10"，int i=10都可以
		(4)JavaScript只需解析就可以执行，而java需要先编译成字节码文件，再执行
	* JavaScript的组成
		(1)ECMAScript
			- ECMA：欧洲计算机协会
			- 由ECMA组织制定的js的语法，语句....
		(2)BOM
			- broswer object model：浏览器对象模型
		(3)DOM
			- document object model：文档对象模型

2、JavaScript和html的结合方式
	(1)再body里使用一个标签：
		<script type="text/JavaScript">JavaScript代码;</script>
	(2)使用script标签，引入一个外部的JavaScript文件
		- 创建一个JavaScript文件，写JavaScript代码
		- <script type="text/JavaScript" src="1.js"></script>

	** 使用第二种方式的时候，就不用在script标签里面写代码了，因为不会被执行。

3、JavaScript的基本数据类型、引用数据类型和声明变量
	* 定义变量都使用关键字var
	* JavaScript的原始类型
		- string：字符串
			** var str = "abc";
		- number：数字类型(包括小数和整数，NaN)
			** var m = 123;
			** NaN：表示不是一个数。也是js中唯一一个自己与自己不相等的
		- boolean：true和false
			** var flag = true;
		- null：空值。是object类型，表示一个空对象的引用
			** var date = null;
		- undifined：定义一个变量，没有赋值。undifined的类型就是undifined
			** var aa;

	* 引用数据类型：数组，对象的引用(var date = new Date())
	* 数据自动转换机制：
		var a = 1;
		var b = true;
		if(a == b) // true。会把a的值，自动转换为true

	* typeof(变量名);查看当前变量的数据类型

4、JavaScript的语句
	- if：判断
		* 和java一样
	-switch：选择
		* 和java一样
	-for、while、do-while：循环
		* 和java一样，不过变量声明要用var
		* for(var i = 0; i < 10; i++){}
	- i++:先执行后自增
	- ++i:先自增后执行

5、JavaScript的运算符
	- JavaScript里面不区分整数和小数
		var j = 123;
		alert(j/1000*1000);
		//在java里卖弄得到的结果是0
		//再JavaScript里面不区分整数小数，123/100=0.123*1000=123
	
	- 字符串的相加相减操作
		var str = "123";
		alert(str+1);//在java里面的结果是1231，在就是里面也是一样
		alert(str-1);//相减时执行的就是相减运算，122

		* 提示NaN：表示不是一个数字
	
	- boolean类型的相加减操作
		* 如果是true，相当于这个值是1
		* 如果是false，相当于这个值是0
	
	- == 和 === 的区别
		* 都是做判断用的
		* ==：只判断值
		* ===：值和数据类型一起判断

	- 引入知识
		直接向页面输出的语句（可以把内容显示在页面上）
		* document.write("字符串");
		* document.write("html代码"):
		* document.write();里面是双引号，如果设置标签的属性需要使用单引号

6、JavaScript的数组
	* 定义方式
		(1)var arr = [1,2,3]; var arr = [true,2,"3"];
		(2)使用内置对象Array
			var arr = new Array(5); //定义一个数组，数组的长度是5
			arr[0] = "1";
		(3)使用内置对象Array
			var arr = new Array(3,4,5); //定义一个数组，数组里面的元素是3、4、5
	* 数组里面有一个属性：length，获取数组的长度
	* 数组可以存放不同的数据类型的数据

7、JavaScript的函数		
	* 函数的参数列表里面，不需要写var，直接写参数名称即可
	* 函数的定义：
		第一种方式：使用关键字function
			function 方法名(参数列表) {
				方法体；
				返回值可有可无；
			}
			方法名();
		第二种方式：函数直接量的形式(匿名函数)，ECMAScript比较推荐的形式
			var add = function(参数列表) {
				方法体和返回值；
			}
			add();
		第三种方式：动态函数（用的少，了解。也称为：function构造函数式）
			- 使用到JavaScript里面的一个内置对象Function
				var add = new Function("参数列表","方法体和返回值");
				add();
	* 函数也是一种数据类型（function类型）：
		函数也可以作为参数传递给另一个函数：
			function a(b) {b()}		//a函数中调用传递过来的函数b
			function c() {alert("ddd")}
			a(c);		//把c函数当成参数，传递给a函数
	
	* 函数中也可定义函数(嵌套函数，尽量不用，没意义)：
		function a() {
			function b() {}		//函数中的函数，这个b函数只能在a函数中调用。在a函数外部无法调用
			b();
		}
		a();

	* 解析顺序问题：
		/*
			可以。function语句式的函数，会被优先解释。
			即：解析时，解析器会先看有没有function语句式的函数。
				如果有：会先解释这个函数，然后再继续往下查找是否还有function语句式的函数。
					直到没有了function语句式的函数，再回到程序第一行开始继续解析
		*/
		a();	
		function a() {}
		b(); //这种形式不会优先解析，所以会报错
		var b = function() {}

	* 作用域问题：
		var k = 1;
		function a() {
			var k = 2;
			function b() {return k;}	//2， 函数作用域。只能看到函数中的k
			var c = function() {return k;}	//2，函数作用域。只能看到函数中的k
			var d = new Function('return k;');	//1，顶级作用域，相当于在函数外面定义。只能看到函数外面的k
			alert(b);
			alert(c);
			alert(d);
		}
		a();

	* 函数的参数：
		** 参数分为形参（函数上定义的参数）， 实参（实际传过来的参数）
		** 方法名.length	: 可以获得形参的个数
		** arguments：
			- 函数内部有一个数组，去接收实际参数。
			- 这个数组就是arguments，可以通过arguments.length，获得实参个数
			- arguments对象只能在函数内部使用
			- arguments还有用的最多的就是做递归操作
			- 有个用法：arguments.callee，指的是函数本身
				arguments.callee.length : 获得形参个数
				
				function a(b) {
					arguments.callee(b);//再次调用a()函数
				}


	* JavaScript的函数重载：
		** JavaScript不存在函数重载
		** 如果有多个方法名相同，参数不同的函数，会调用最后一个函数
		** JavaScript的函数里面都会有一个arguments的数组，把参数保存到里面，可以通过这个数组模拟函数重载
		** 面试题：JavaScript是否存在重载?
				(1)不存在
				(2)但是可以通过arguments数组来模拟实现重载
	

8、JavaScript的全局变量和局部变量
	* 全局变量：在script标签里面定义一个变量，这个变量在页面中JavaScript部分都可以使用
	* 局部变量：在方法内部定义一个变量，只能在方法内部使用

9、script标签的位置
	* 一般把script标签放到</head>中

10、this：
	在js中，this所代表的是：
		this对象是在运行时基于函数的执行环境绑定的。
		在全局函数中，this等于window，而当函数被作为某个对象的方法调用时，this等于那个对象。
		也就是说this关键字总是指代调用者。

		例子：
			var k = 10;	//全局变量，相当于在window对象中设置了一个变量k
			function test() {this.k = 20}	//
			
			/*
				这个调用语句是在全局中调用的，相当于window.test(); 
				所以这个时候this就是window对象
			*/
			test();
			alert(test.k);//undefined
			alert(k);//20 相当于window.k

11、call、apply
	每一个函数都包含两个非继承而来的方法：call、apply。
	这俩个方法的用途都是在特定的作用域中调用函数，实际上等于设置函数体内this对象的值。
	call、apply的用途之一就是传递参数，但事实上，它们真正强大的地方式能够扩充函数赖以运行的作用域。
	使用call（）、aplly（）来扩充作用域的最大好处就是对象不需要与方法有任何耦合关系。
